@page "/Invoice/Creator"
@using Data
@using Data.Bags
@using Data.DbModel
@using Invoicify.Client.BlazorComponents
@inject NavigationManager Navigation
@inject HttpClient Http

<h3>Invoice Creator</h3>
<EditForm Model="_invoice" OnValidSubmit="SaveInvoice">
    <DataAnnotationsValidator />
    
    <InvoiceComponent Invoice="_invoice" />
    <PartyInfoComponent Title="Seller Info" PartyInfo="_invoice.SellerInfo" />
    <PartyInfoComponent Title="Customer Info" PartyInfo="_invoice.CustomerInfo" />
    <BankInfoComponent BankInfo="_invoice.BankInfo" />
    <QrMiscComponent QrMisc="_qr"/>
    
    <InvoiceListComponent T="OrderInfo" Items="_invoice.OrdersInfo" Title="Orders" AddAction="AddOrder" ButtonText="Add Order">
        <ItemTemplate Context="ordersContext">
            <OrderInfoComponent OrderInfo="ordersContext" />
        </ItemTemplate>
    </InvoiceListComponent>
    
    <InvoiceListComponent T="InvoiceItem" Items="_invoice.Items" Title="Invoice Items" AddAction="AddItem">
        <ItemTemplate Context="itemsContext">
            <InvoiceItemComponent InvoiceItem="itemsContext" OrderInfos="_invoice.OrdersInfo" />
        </ItemTemplate>
    </InvoiceListComponent>
    
    <button type="submit" class="btn btn-primary" style="margin-bottom: 6px">Save Invoice</button>
    <button type="button" @onclick="() => FillTestInvoice()" class="btn btn-primary" style="margin-bottom: 6px">Fill Domestic test</button>
    <button type="button" @onclick="() => FillTestInvoice(false)" class="btn btn-primary" style="margin-bottom: 6px">Fill International test</button>
    <button type="button" @onclick="SaveTestInvoicePrepedQr" class="btn btn-primary" style="margin-bottom: 6px">Save Test (Prepped QR Code)</button>
    <button type="button" @onclick="SaveLazycodeInvoice" class="btn btn-primary" style="margin-bottom: 6px">Save HC_LazyCode</button>
    <button type="button" @onclick="SaveValthorInvoice" class="btn btn-primary" style="margin-bottom: 6px">Save HC_Valthor</button>
</EditForm>

@code {
    private Invoice _invoice = new() {
        SellerInfo = new PartyInfo(),
        CustomerInfo = new PartyInfo(),
        BankInfo = new BankInfo(),
        OrdersInfo = new List<OrderInfo>(),
        Items = new List<InvoiceItem>(),
        Number = default,
        IssueDate = InvoiceExtensions.NOW,
        DueDate = InvoiceExtensions.DUE(14)
    };

    private QrMiscBag _qr = new();

    private void AddOrder() {
        _invoice.OrdersInfo.Add(new OrderInfo {
            Date = InvoiceExtensions.NOW
        });
    }
    
    private void AddItem() {
        _invoice.Items.Add(new InvoiceItem {  });
    }

    private QrPayment FillPayment() {
        QrPayment tmp;
        
        if (_invoice.BankInfo.Domestic) {
            tmp = new QrPayment {
                Domestic = true,
                Account = _invoice.BankInfo.Account!,
                BankNumber = _invoice.BankInfo.BankNumber,
                VariableSymbol = int.Parse(_invoice.VariableSymbol ?? "0"),
                Amount = _invoice.TotalPrice,
                Currency = _invoice.Currency,
            
                MessageForRecipient = _qr.MessageForRecipient
            };
        } else {
            tmp = new QrPayment {
                Domestic = false,
                Account = _invoice.BankInfo.Iban!,
                Bic = _invoice.BankInfo.Bic,
                VariableSymbol = int.Parse(_invoice.VariableSymbol ?? "0"),
                Amount = _invoice.TotalPrice,
                Currency = _invoice.Currency,
            
                MessageForRecipient = _qr.MessageForRecipient
            };
        }

        return tmp;
    }
    
    private async Task SaveInvoice() {

        _invoice.QrPayment = FillPayment();
        
        await Http.PostAsJsonAsync("invoice", _invoice);
        Navigation.NavigateTo("/Invoice/Creator");
    }

    private async Task SaveLazycodeInvoice() {
        //test:
        _invoice = InvoiceExtensions.GetTestInvoice_LazyCode();
        await Http.PostAsJsonAsync("invoice", _invoice);
    }

    private async Task SaveValthorInvoice() {
        _invoice = InvoiceExtensions.GetTestInvoice_Valthor();
        await Http.PostAsJsonAsync("invoice", _invoice);
    }

    private Task FillTestInvoice(bool domestic = true) {
        //test:
        _invoice = domestic ? InvoiceExtensions.GetTestInvoice() : InvoiceExtensions.GetTestIbanInvoice();
        _invoice.QrPayment = FillPayment();
        
        return Task.CompletedTask;
    }

    private async Task SaveTestInvoicePrepedQr() {
        _invoice = InvoiceExtensions.GetTestInvoice();
        await Http.PostAsJsonAsync("invoice", _invoice);
    }
}

<style>
    /* General Layout */
    .component-div {
        background: #f2f3f5; /* Light gray background */
        border: 1px solid #dee2e6; /* Subtle border */
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 16px;
        box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.1);

        width: 40%;
    }

    /* Headings */
    .component-div h4 {
        font-size: 1.25rem;
        font-weight: bold;
        color: #343a40; /* Dark gray for contrast */
        margin-bottom: 12px;
    }

    /* Buttons */
    .component-div button {
        background-color: #007bff; /* Bootstrap primary */
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .component-div button:hover {
        background-color: #0056b3;
    }

    /* Forms */
    .component-div form {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    /* Lists */
    .component-div .item-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
        padding: 8px;
        background: #ffffff;
        border-radius: 5px;
    }

    /* List Items */
    .list-item-div {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        margin: 16px 0 0 0;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

    .form-div:focus-within {
        /*background: #f1f3f5; !* Slightly different background on hover *!*/
        /*border: 3px solid #007bff; !* Blue border on focus *!*/
        box-shadow: 1px 1px 4px #00000088;
        transition: all 0.1s ease-in;
    }
</style>
