@page "/Invoice/Creator"
@using Data
@using Data.Bags
@using Data.DbModel
@using Invoicify.Client.BlazorComponents
@inject NavigationManager Navigation
@inject HttpClient Http

<link href="css/InvoiceBrowser&Creator.css" rel="stylesheet" />

<h3>Invoice Creator</h3>
<div class="d-flex row row-cols-2">
    <EditForm Model="_invoice" OnValidSubmit="SaveInvoice">
        <button type="reset" class="btn btn-dark" style="margin-bottom: 6px">Clear all</button>
        <DataAnnotationsValidator/>

        <InvoiceComponent Invoice="_invoice"/>
        <PartyInfoComponent Title="Seller Info" PartyInfo="_invoice.SellerInfo"/>
        <PartyInfoComponent Title="Customer Info" PartyInfo="_invoice.CustomerInfo"/>
        <BankInfoComponent BankInfo="_invoice.BankInfo"/>
        <QrMiscComponent QrMisc="_qr"/>

        <InvoiceListComponent T="OrderInfo" Items="_invoice.OrdersInfo" Title="Orders" AddAction="AddOrder" ButtonText="Add Order">
            <ItemTemplate Context="ordersContext">
                <OrderInfoComponent OrderInfo="ordersContext"/>
            </ItemTemplate>
        </InvoiceListComponent>

        <InvoiceListComponent T="InvoiceItem" Items="_invoice.Items" Title="Invoice Items" AddAction="AddItem">
            <ItemTemplate Context="itemsContext">
                <InvoiceItemComponent InvoiceItem="itemsContext" OrderInfos="_invoice.OrdersInfo"/>
            </ItemTemplate>
        </InvoiceListComponent>

        <button type="submit" class="btn btn-primary" style="margin-bottom: 6px">Save Invoice</button>
        <button type="button" @onclick="() => FillTestInvoice()" class="btn btn-primary" style="margin-bottom: 6px">Fill Domestic test</button>
        <button type="button" @onclick="() => FillTestInvoice(false)" class="btn btn-primary" style="margin-bottom: 6px">Fill International test</button>
        <button type="button" @onclick="SaveTestInvoicePrepedQr" class="btn btn-primary" style="margin-bottom: 6px">Save Test (Prepped QR Code)</button>
        <button type="button" @onclick="FillLazycodeInvoice" class="btn btn-primary" style="margin-bottom: 6px">Fill HC_LazyCode</button>
        <button type="button" @onclick="FillValthorInvoice" class="btn btn-primary" style="margin-bottom: 6px">Fill HC_Valthor</button>
    </EditForm>
    <div class="d-flex">
        @* <button class="btn btn-primary">Test</button> *@
    </div>
</div>

@code {
    private Invoice _invoice = new() {
        SellerInfo = new PartyInfo(),
        CustomerInfo = new PartyInfo(),
        BankInfo = new BankInfo(),
        OrdersInfo = new List<OrderInfo>(),
        Items = new List<InvoiceItem>(),
        Number = default,
        IssueDate = InvoiceExtensions.NOW,
        DueDate = InvoiceExtensions.DUE(14)
    };

    private QrMiscBag _qr = new();

    private void AddOrder() {
        _invoice.OrdersInfo.Add(new OrderInfo {
            Date = InvoiceExtensions.NOW
        });
    }
    
    private void AddItem() {
        _invoice.Items.Add(new InvoiceItem {  });
    }

    private QrPayment FillPayment() {
        QrPayment tmp;
        
        if (_invoice.BankInfo.Domestic) {
            tmp = new QrPayment {
                Domestic = true,
                Account = _invoice.BankInfo.Account!,
                BankNumber = _invoice.BankInfo.BankNumber,
                VariableSymbol = int.Parse(_invoice.VariableSymbol ?? "0"),
                Amount = _invoice.TotalPrice,
                Currency = _invoice.Currency,
            
                MessageForRecipient = _qr.MessageForRecipient
            };
        } else {
            tmp = new QrPayment {
                Domestic = false,
                Account = _invoice.BankInfo.Iban!,
                Bic = _invoice.BankInfo.Bic,
                VariableSymbol = int.Parse(_invoice.VariableSymbol ?? "0"),
                Amount = _invoice.TotalPrice,
                Currency = _invoice.Currency,
            
                MessageForRecipient = _qr.MessageForRecipient
            };
        }

        return tmp;
    }
    
    private async Task SaveInvoice() {

        _invoice.QrPayment = FillPayment();
        
        await Http.PostAsJsonAsync("invoice", _invoice);
        Navigation.NavigateTo("/Invoice/Creator");
    }

    private Task FillLazycodeInvoice() {
        //test:
        _invoice = InvoiceExtensions.GetTestInvoice_LazyCode();
        return Task.CompletedTask;
    }

    private Task FillValthorInvoice() {
        _invoice = InvoiceExtensions.GetTestInvoice_Valthor();
        return Task.CompletedTask;
    }

    private Task FillTestInvoice(bool domestic = true) {
        //test:
        _invoice = domestic ? InvoiceExtensions.GetTestInvoice() : InvoiceExtensions.GetTestIbanInvoice();
        _invoice.QrPayment = FillPayment();
        
        return Task.CompletedTask;
    }

    private async Task SaveTestInvoicePrepedQr() {
        _invoice = InvoiceExtensions.GetTestInvoice();
        await Http.PostAsJsonAsync("invoice", _invoice);
    }
}
