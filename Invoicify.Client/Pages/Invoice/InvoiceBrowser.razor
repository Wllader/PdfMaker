@page "/Invoice/Browser"
@using Data
@using Data.Bags
@using Data.DbModel
@using Invoicify.Client.BlazorComponents
@using static Data.CurrencyTransformer
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS

<link href="css/InvoiceBrowser&Creator.css" rel="stylesheet" />

<!--
    Invoice Browser page for viewing, selecting, and exporting invoices.
    Allows users to preview invoice details, see QR codes, and export to HTML/PDF.
-->

<PageTitle>Invoice Browser</PageTitle>
<h3>Invoice Browser</h3>

<span>
    <div style="margin-bottom: 1rem">
        <InteractiveTable TItem="InvoiceBag" Items="_invoices" @bind-SelectedItems="_selected" MultipleSelection="false"
                          Columns="cols" OnRowClick="@_GetInvoiceInfo"/>
    </div>
    @if (_selectedInvoice is not null) {
        <div class="component-div">
            <h4>Selected invoice: @_selectedInvoice.Number</h4>
            <div class="component-div component-input-header">
                <div style="display: flex; gap: 1rem;">
                    <div>
                        @if (_selectedInvoice.QrPayment is not null) {
                            _img = _selectedInvoice.QrPayment.GetQrCode();
                        }
                        else if (_selectedInvoice.QrSpr is not null) {
                            _selectedInvoice.QrPayment = QrPayment.FromSprString(_selectedInvoice.QrSpr);
                            _img = _selectedInvoice.QrPayment.GetQrCode();
                        }

                        @if (_img is not null) {
                            <img class="qr-code" src="@_img" alt="@_selectedInvoice.QrSpr" style="max-height: 150px">
                        }
                    </div>

                    <div style="display: flex; flex-direction: column; justify-content: space-evenly">
                        <input type="button" class="btn btn-primary" value="See HTML" @onclick="_GenerateHtml"/>
                        <input type="button" class="btn btn-primary" value="Get PDF" @onclick="_GeneratePdf"/>
                    </div>
                </div>
            </div>
            <div class="component-div">
                <ul>
                    <li>Seller: @_selectedInvoice.SellerInfo.FullName</li>
                    <li>Customer: @_selectedInvoice.CustomerInfo.FullName</li>
                    <li>Variable Symbol: @_selectedInvoice.VariableSymbol</li>
                    @if (!string.IsNullOrEmpty(_selectedInvoice.BankInfo.Account)) {
                        <li>Account: @_selectedInvoice.BankInfo.Account/@_selectedInvoice.BankInfo.BankNumber</li>
                    }
                    else {
                        <li>BIC: @_selectedInvoice.BankInfo.Bic</li>
                        <li>IBAN: @_selectedInvoice.BankInfo.Iban</li>
                    }

                    <li>Issue Date: @_selectedInvoice.IssueDate.ToLongDateString()</li>
                    <li>Due Date: @_selectedInvoice.DueDate.ToLongDateString()</li>

                    <li>Items:</li>
                    <div>
                        <ol>
                            @foreach (var item in _selectedInvoice.Items) {
                                <li>Item: @item.Name</li>
                                <ul>
                                    <li>Description: @item.Description</li>
                                    <li>Quantity: @item.Quantity @item.Unit</li>
                                    <li>Unit Price: @item.PricePerUnit.ToString("C", CurrencyFormat(_selectedInvoice.Currency))</li>
                                    <li>Total Price: @item.TotalPrice.ToString("C", CurrencyFormat(_selectedInvoice.Currency))</li>
                                </ul>
                            }
                        </ol>
                    </div>
                </ul>
            </div>
        </div>
    }
</span>

@code {
    private Invoice? _selectedInvoice;
    private string? _img;

    private readonly Dictionary<string, string?> cols;

    private List<InvoiceBag> _invoices = [];
    private HashSet<InvoiceBag> _selected = [];

    protected override async Task OnInitializedAsync() {
        _invoices = await HelperMethods.GetRemoteObjectsAsync<InvoiceBag>(Http, "asbag/invoice?top=2");
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Loads full invoice details for the selected invoice.
    /// </summary>
    /// <param name="item">The selected invoice bag</param>
    private async Task _GetInvoiceInfo(InvoiceBag item) {
        _selectedInvoice = await HelperMethods.GetRemoteObjectAsync<Invoice>(Http, $"/invoice/{item.Id}");
    }

    /// <summary>
    /// Opens the HTML view of the selected invoice in a new browser tab.
    /// </summary>
    private async Task _GenerateHtml() {
        if (_selectedInvoice is null)
            return;

        var url = $"{Http.BaseAddress}invoice/{_selectedInvoice.Id}/html";
        await JS.InvokeVoidAsync("open", url, "_blank");
    }

    /// <summary>
    /// Opens the PDF view of the selected invoice in a new browser tab.
    /// </summary>
    private async Task _GeneratePdf() {
        if (_selectedInvoice is null)
            return;
        
        var url = $"{Http.BaseAddress}invoice/{_selectedInvoice.Id}/pdf";
        await JS.InvokeVoidAsync("open", url, "_blank");
    }
}
