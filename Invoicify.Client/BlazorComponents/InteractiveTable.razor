@using System.Reflection
@typeparam TItem where TItem : notnull

<link href="css/InteractiveTable.css" rel="stylesheet" />

@code { // Parameters

    /// <summary>
    /// The items to display in the interactive table.
    /// </summary>
    [Parameter]
    public bool? MultipleSelection { get; set; } = true;
    
    [Parameter]
    public List<TItem> Items { get; set; } = [];

    /// <summary>
    /// The currently selected items in the table.
    /// </summary>
    [Parameter]
    public HashSet<TItem> SelectedItems { get; set; } = [];
    
    /// <summary>
    /// Callback invoked when the selected items change.
    /// </summary>
    [Parameter]
    public EventCallback<HashSet<TItem>> SelectedItemsChanged { get; set; }
    
    /// <summary>
    /// Callback invoked when a row is clicked.
    /// </summary>
    [Parameter]
    public EventCallback<TItem> OnRowClick { get; set; }

    /// <summary>
    /// The columns to display in the table, mapped by property name.
    /// </summary>
    [Parameter]
    public Dictionary<string, string?>? Columns { get; set; }
    
    /// <summary>
    /// Whether to rename columns based on the Columns parameter.
    /// </summary>
    [Parameter]
    public bool RenameColumns { get; set; } = true;

}

<div class="ntfm-table-wrapper">
    <table class="ntfm-table">
        <thead>
            <tr>
                @foreach (var p in _objectProperties) {
                    <th>@(Columns?.GetValueOrDefault(p.Name) ?? p.Name)</th>
                }
            </tr>
        </thead>
        <tbody>
        @foreach (var item in Items) {
            <tr class="@_GetRowClasses(item)" @onclick="() => _SelectRow(item)">
                @foreach (var p in _objectProperties) {
                    var value = p.GetValue(item);
                    if (value is IEnumerable<string> enumerable) {
                        <td>@string.Join(", ", enumerable)</td>
                    } else {
                        <td>@value</td>
                    }
                }
            </tr>
        }
        </tbody>
    </table>
</div>

@code { // Code
    List<PropertyInfo> _objectProperties = [];
    Dictionary<TItem, HashSet<string>> _rowClasses = [];

    /// <summary>
    /// Called when component parameters are set. Updates property and row class mappings.
    /// </summary>
    protected override void OnParametersSet() {
        _objectProperties = typeof(TItem).GetProperties().ToList();
        if (Columns is not null && !RenameColumns) {
            _objectProperties = _objectProperties.Where(o => Columns.Keys.Contains(o.Name)).ToList();
        }
        
        // _rowClasses = Items.ToDictionary(item => item, _ => new HashSet<string>());
        foreach (var item in Items) {
            _rowClasses.TryAdd(item, []);
        }
    }
    
    /// <summary>
    /// Handles row selection logic and invokes row click callback.
    /// </summary>
    /// <param name="item">The item that was clicked</param>
    private async Task _SelectRow(TItem item) {
        await OnRowClick.InvokeAsync(item);
        
        if (MultipleSelection is null)
            return;
        
        if (!MultipleSelection.Value) {
            if (!SelectedItems.Contains(item))
                SelectedItems.Clear();
        }
        
        if(!SelectedItems.Add(item)) {
            SelectedItems.Remove(item);
        }
        
        await SelectedItemsChanged.InvokeAsync(SelectedItems);
    }
    
    /// <summary>
    /// Updates row class based on selection state.
    /// </summary>
    /// <param name="item">The item to check</param>
    private void _IsSelected(TItem item) {
        if (SelectedItems.Contains(item)) {
            _rowClasses[item].Add("selected");
        } else {
            _rowClasses[item].Remove("selected");
        }
    }

    /// <summary>
    /// Gets the CSS classes for a row based on its selection state.
    /// </summary>
    /// <param name="item">The item to get classes for</param>
    /// <returns>Space-separated CSS class string</returns>
    private string _GetRowClasses(TItem item) {
        if(!_rowClasses.ContainsKey(item))
            _rowClasses[item] = [];
        
        _IsSelected(item);
        return string.Join(' ', _rowClasses[item]);
    }
}

@code { // public API
    
    //? Only for testing purposes
    /// <summary>
    /// Gets a comma-separated string of selected items.
    /// </summary>
    /// <returns>Comma-separated selected items</returns>
    public string GetSelectedItems() => SelectedItems.Count == 0 ? string.Empty : string.Join(", ", SelectedItems);
    /// <summary>
    /// Gets a comma-separated string of all items.
    /// </summary>
    /// <returns>Comma-separated all items</returns>
    public string GetAllItems() => Items.Count == 0 ? string.Empty : string.Join(", ", Items);

    /// <summary>
    /// Adds a CSS class to a specific item row.
    /// </summary>
    /// <param name="item">The item</param>
    /// <param name="className">CSS class name</param>
    public void SetItemClass(TItem item, string className) {
        if (string.IsNullOrWhiteSpace(className)) return;
        if (!_rowClasses.ContainsKey(item)) return;

        _rowClasses[item].Add(className);
        StateHasChanged();
    }

    /// <summary>
    /// Adds a CSS class to multiple item rows.
    /// </summary>
    /// <param name="items">The items</param>
    /// <param name="className">CSS class name</param>
    public void SetItemClass(IEnumerable<TItem> items, string className) {
        if (string.IsNullOrWhiteSpace(className)) return;
        foreach (var item in items) {
            SetItemClass(item, className);
        }
    }

    /// <summary>
    /// Adds a CSS class to all item rows.
    /// </summary>
    /// <param name="className">CSS class name</param>
    public void SetAllItemsClass(string className) => SetItemClass(Items, className);
    /// <summary>
    /// Adds a CSS class to all selected item rows.
    /// </summary>
    /// <param name="className">CSS class name</param>
    public void SetSelectedItemsClass(string className) => SetItemClass(SelectedItems, className);

    /// <summary>
    /// Removes a CSS class from a specific item row.
    /// </summary>
    /// <param name="item">The item</param>
    /// <param name="className">CSS class name</param>
    public void RemoveItemClass(TItem item, string className) {
        if (string.IsNullOrWhiteSpace(className)) return;
        if (!_rowClasses.ContainsKey(item)) return;

        _rowClasses[item].Remove(className);
        StateHasChanged();
    }
    
    /// <summary>
    /// Removes a CSS class from multiple item rows.
    /// </summary>
    /// <param name="items">The items</param>
    /// <param name="className">CSS class name</param>
    public void RemoveItemClass(IEnumerable<TItem> items, string className) {
        if (string.IsNullOrWhiteSpace(className)) return;
        foreach (var item in items) {
            RemoveItemClass(item, className);
        }
    }
    
    /// <summary>
    /// Removes a CSS class from all item rows.
    /// </summary>
    /// <param name="className">CSS class name</param>
    public void RemoveAllItemsClass(string className) => RemoveItemClass(Items, className);
    /// <summary>
    /// Removes a CSS class from all selected item rows.
    /// </summary>
    /// <param name="className">CSS class name</param>
    public void RemoveSelectedItemsClass(string className) => RemoveItemClass(SelectedItems, className);
}